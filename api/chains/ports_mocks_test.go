// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package chains_test is a generated GoMock package.
package chains_test

import (
	context "context"
	reflect "reflect"
	time "time"

	cns "github.com/emerishq/demeris-backend-models/cns"
	sdktypes "github.com/emerishq/emeris-utils/exported/sdktypes"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// StakingAPR mocks base method.
func (m *MockApp) StakingAPR(ctx context.Context, chain cns.Chain) (sdktypes.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingAPR", ctx, chain)
	ret0, _ := ret[0].(sdktypes.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingAPR indicates an expected call of StakingAPR.
func (mr *MockAppMockRecorder) StakingAPR(ctx, chain interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingAPR", reflect.TypeOf((*MockApp)(nil).StakingAPR), ctx, chain)
}

// MockCacheBackend is a mock of CacheBackend interface.
type MockCacheBackend struct {
	ctrl     *gomock.Controller
	recorder *MockCacheBackendMockRecorder
}

// MockCacheBackendMockRecorder is the mock recorder for MockCacheBackend.
type MockCacheBackendMockRecorder struct {
	mock *MockCacheBackend
}

// NewMockCacheBackend creates a new mock instance.
func NewMockCacheBackend(ctrl *gomock.Controller) *MockCacheBackend {
	mock := &MockCacheBackend{ctrl: ctrl}
	mock.recorder = &MockCacheBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheBackend) EXPECT() *MockCacheBackendMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheBackend) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheBackendMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheBackend)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockCacheBackend) Set(ctx context.Context, key, value string, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCacheBackendMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheBackend)(nil).Set), ctx, key, value, expiration)
}
