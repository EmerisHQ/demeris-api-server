// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package account_test is a generated GoMock package.
package account_test

import (
	context "context"
	reflect "reflect"

	account "github.com/emerishq/demeris-api-server/api/account"
	gomock "github.com/golang/mock/gomock"
)

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// Balances mocks base method.
func (m *MockApp) Balances(ctx context.Context, addresses []string) ([]account.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Balances", ctx, addresses)
	ret0, _ := ret[0].([]account.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Balances indicates an expected call of Balances.
func (mr *MockAppMockRecorder) Balances(ctx, addresses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Balances", reflect.TypeOf((*MockApp)(nil).Balances), ctx, addresses)
}

// DeriveRawAddress mocks base method.
func (m *MockApp) DeriveRawAddress(ctx context.Context, rawAddress string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeriveRawAddress", ctx, rawAddress)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeriveRawAddress indicates an expected call of DeriveRawAddress.
func (mr *MockAppMockRecorder) DeriveRawAddress(ctx, rawAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeriveRawAddress", reflect.TypeOf((*MockApp)(nil).DeriveRawAddress), ctx, rawAddress)
}
