// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cns "github.com/emerishq/demeris-backend-models/cns"

	mock "github.com/stretchr/testify/mock"

	sdktypes "github.com/emerishq/emeris-utils/exported/sdktypes"

	testing "testing"
)

// App is an autogenerated mock type for the IApp type
type App struct {
	mock.Mock
}

type App_Expecter struct {
	mock *mock.Mock
}

func (_m *App) EXPECT() *App_Expecter {
	return &App_Expecter{mock: &_m.Mock}
}

// StakingAPR provides a mock function with given fields: ctx, chain
func (_m *App) StakingAPR(ctx context.Context, chain cns.Chain) (sdktypes.Dec, error) {
	ret := _m.Called(ctx, chain)

	var r0 sdktypes.Dec
	if rf, ok := ret.Get(0).(func(context.Context, cns.Chain) sdktypes.Dec); ok {
		r0 = rf(ctx, chain)
	} else {
		r0 = ret.Get(0).(sdktypes.Dec)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, cns.Chain) error); ok {
		r1 = rf(ctx, chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// App_StakingAPR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StakingAPR'
type App_StakingAPR_Call struct {
	*mock.Call
}

// StakingAPR is a helper method to define mock.On call
//  - ctx context.Context
//  - chain cns.Chain
func (_e *App_Expecter) StakingAPR(ctx interface{}, chain interface{}) *App_StakingAPR_Call {
	return &App_StakingAPR_Call{Call: _e.mock.On("StakingAPR", ctx, chain)}
}

func (_c *App_StakingAPR_Call) Run(run func(ctx context.Context, chain cns.Chain)) *App_StakingAPR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cns.Chain))
	})
	return _c
}

func (_c *App_StakingAPR_Call) Return(_a0 sdktypes.Dec, _a1 error) *App_StakingAPR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewApp creates a new instance of App. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t testing.TB) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
