// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sdkutilities "github.com/emerishq/sdk-service-meta/gen/sdk_utilities"
	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// SDKService is an autogenerated mock type for the Service type
type SDKService struct {
	mock.Mock
}

type SDKService_Expecter struct {
	mock *mock.Mock
}

func (_m *SDKService) EXPECT() *SDKService_Expecter {
	return &SDKService_Expecter{mock: &_m.Mock}
}

// AccountNumbers provides a mock function with given fields: _a0, _a1
func (_m *SDKService) AccountNumbers(_a0 context.Context, _a1 *sdkutilities.AccountNumbersPayload) (*sdkutilities.AccountNumbers2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.AccountNumbers2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.AccountNumbersPayload) *sdkutilities.AccountNumbers2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.AccountNumbers2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.AccountNumbersPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_AccountNumbers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AccountNumbers'
type SDKService_AccountNumbers_Call struct {
	*mock.Call
}

// AccountNumbers is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.AccountNumbersPayload
func (_e *SDKService_Expecter) AccountNumbers(_a0 interface{}, _a1 interface{}) *SDKService_AccountNumbers_Call {
	return &SDKService_AccountNumbers_Call{Call: _e.mock.On("AccountNumbers", _a0, _a1)}
}

func (_c *SDKService_AccountNumbers_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.AccountNumbersPayload)) *SDKService_AccountNumbers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.AccountNumbersPayload))
	})
	return _c
}

func (_c *SDKService_AccountNumbers_Call) Return(res *sdkutilities.AccountNumbers2, err error) *SDKService_AccountNumbers_Call {
	_c.Call.Return(res, err)
	return _c
}

// Block provides a mock function with given fields: _a0, _a1
func (_m *SDKService) Block(_a0 context.Context, _a1 *sdkutilities.BlockPayload) (*sdkutilities.BlockData, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.BlockData
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.BlockPayload) *sdkutilities.BlockData); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.BlockData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.BlockPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_Block_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Block'
type SDKService_Block_Call struct {
	*mock.Call
}

// Block is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.BlockPayload
func (_e *SDKService_Expecter) Block(_a0 interface{}, _a1 interface{}) *SDKService_Block_Call {
	return &SDKService_Block_Call{Call: _e.mock.On("Block", _a0, _a1)}
}

func (_c *SDKService_Block_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.BlockPayload)) *SDKService_Block_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.BlockPayload))
	})
	return _c
}

func (_c *SDKService_Block_Call) Return(res *sdkutilities.BlockData, err error) *SDKService_Block_Call {
	_c.Call.Return(res, err)
	return _c
}

// BroadcastTx provides a mock function with given fields: _a0, _a1
func (_m *SDKService) BroadcastTx(_a0 context.Context, _a1 *sdkutilities.BroadcastTxPayload) (*sdkutilities.TransactionResult, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.TransactionResult
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.BroadcastTxPayload) *sdkutilities.TransactionResult); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.TransactionResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.BroadcastTxPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_BroadcastTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BroadcastTx'
type SDKService_BroadcastTx_Call struct {
	*mock.Call
}

// BroadcastTx is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.BroadcastTxPayload
func (_e *SDKService_Expecter) BroadcastTx(_a0 interface{}, _a1 interface{}) *SDKService_BroadcastTx_Call {
	return &SDKService_BroadcastTx_Call{Call: _e.mock.On("BroadcastTx", _a0, _a1)}
}

func (_c *SDKService_BroadcastTx_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.BroadcastTxPayload)) *SDKService_BroadcastTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.BroadcastTxPayload))
	})
	return _c
}

func (_c *SDKService_BroadcastTx_Call) Return(res *sdkutilities.TransactionResult, err error) *SDKService_BroadcastTx_Call {
	_c.Call.Return(res, err)
	return _c
}

// BudgetParams provides a mock function with given fields: _a0, _a1
func (_m *SDKService) BudgetParams(_a0 context.Context, _a1 *sdkutilities.BudgetParamsPayload) (*sdkutilities.BudgetParams2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.BudgetParams2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.BudgetParamsPayload) *sdkutilities.BudgetParams2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.BudgetParams2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.BudgetParamsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_BudgetParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BudgetParams'
type SDKService_BudgetParams_Call struct {
	*mock.Call
}

// BudgetParams is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.BudgetParamsPayload
func (_e *SDKService_Expecter) BudgetParams(_a0 interface{}, _a1 interface{}) *SDKService_BudgetParams_Call {
	return &SDKService_BudgetParams_Call{Call: _e.mock.On("BudgetParams", _a0, _a1)}
}

func (_c *SDKService_BudgetParams_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.BudgetParamsPayload)) *SDKService_BudgetParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.BudgetParamsPayload))
	})
	return _c
}

func (_c *SDKService_BudgetParams_Call) Return(res *sdkutilities.BudgetParams2, err error) *SDKService_BudgetParams_Call {
	_c.Call.Return(res, err)
	return _c
}

// DelegatorRewards provides a mock function with given fields: _a0, _a1
func (_m *SDKService) DelegatorRewards(_a0 context.Context, _a1 *sdkutilities.DelegatorRewardsPayload) (*sdkutilities.DelegatorRewards2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.DelegatorRewards2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.DelegatorRewardsPayload) *sdkutilities.DelegatorRewards2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.DelegatorRewards2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.DelegatorRewardsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_DelegatorRewards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DelegatorRewards'
type SDKService_DelegatorRewards_Call struct {
	*mock.Call
}

// DelegatorRewards is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.DelegatorRewardsPayload
func (_e *SDKService_Expecter) DelegatorRewards(_a0 interface{}, _a1 interface{}) *SDKService_DelegatorRewards_Call {
	return &SDKService_DelegatorRewards_Call{Call: _e.mock.On("DelegatorRewards", _a0, _a1)}
}

func (_c *SDKService_DelegatorRewards_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.DelegatorRewardsPayload)) *SDKService_DelegatorRewards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.DelegatorRewardsPayload))
	})
	return _c
}

func (_c *SDKService_DelegatorRewards_Call) Return(res *sdkutilities.DelegatorRewards2, err error) *SDKService_DelegatorRewards_Call {
	_c.Call.Return(res, err)
	return _c
}

// DistributionParams provides a mock function with given fields: _a0, _a1
func (_m *SDKService) DistributionParams(_a0 context.Context, _a1 *sdkutilities.DistributionParamsPayload) (*sdkutilities.DistributionParams2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.DistributionParams2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.DistributionParamsPayload) *sdkutilities.DistributionParams2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.DistributionParams2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.DistributionParamsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_DistributionParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributionParams'
type SDKService_DistributionParams_Call struct {
	*mock.Call
}

// DistributionParams is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.DistributionParamsPayload
func (_e *SDKService_Expecter) DistributionParams(_a0 interface{}, _a1 interface{}) *SDKService_DistributionParams_Call {
	return &SDKService_DistributionParams_Call{Call: _e.mock.On("DistributionParams", _a0, _a1)}
}

func (_c *SDKService_DistributionParams_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.DistributionParamsPayload)) *SDKService_DistributionParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.DistributionParamsPayload))
	})
	return _c
}

func (_c *SDKService_DistributionParams_Call) Return(res *sdkutilities.DistributionParams2, err error) *SDKService_DistributionParams_Call {
	_c.Call.Return(res, err)
	return _c
}

// EmoneyInflation provides a mock function with given fields: _a0, _a1
func (_m *SDKService) EmoneyInflation(_a0 context.Context, _a1 *sdkutilities.EmoneyInflationPayload) (*sdkutilities.EmoneyInflation2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.EmoneyInflation2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.EmoneyInflationPayload) *sdkutilities.EmoneyInflation2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.EmoneyInflation2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.EmoneyInflationPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_EmoneyInflation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EmoneyInflation'
type SDKService_EmoneyInflation_Call struct {
	*mock.Call
}

// EmoneyInflation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.EmoneyInflationPayload
func (_e *SDKService_Expecter) EmoneyInflation(_a0 interface{}, _a1 interface{}) *SDKService_EmoneyInflation_Call {
	return &SDKService_EmoneyInflation_Call{Call: _e.mock.On("EmoneyInflation", _a0, _a1)}
}

func (_c *SDKService_EmoneyInflation_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.EmoneyInflationPayload)) *SDKService_EmoneyInflation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.EmoneyInflationPayload))
	})
	return _c
}

func (_c *SDKService_EmoneyInflation_Call) Return(res *sdkutilities.EmoneyInflation2, err error) *SDKService_EmoneyInflation_Call {
	_c.Call.Return(res, err)
	return _c
}

// EstimateFees provides a mock function with given fields: _a0, _a1
func (_m *SDKService) EstimateFees(_a0 context.Context, _a1 *sdkutilities.EstimateFeesPayload) (*sdkutilities.Simulation, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.Simulation
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.EstimateFeesPayload) *sdkutilities.Simulation); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.Simulation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.EstimateFeesPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_EstimateFees_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EstimateFees'
type SDKService_EstimateFees_Call struct {
	*mock.Call
}

// EstimateFees is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.EstimateFeesPayload
func (_e *SDKService_Expecter) EstimateFees(_a0 interface{}, _a1 interface{}) *SDKService_EstimateFees_Call {
	return &SDKService_EstimateFees_Call{Call: _e.mock.On("EstimateFees", _a0, _a1)}
}

func (_c *SDKService_EstimateFees_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.EstimateFeesPayload)) *SDKService_EstimateFees_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.EstimateFeesPayload))
	})
	return _c
}

func (_c *SDKService_EstimateFees_Call) Return(res *sdkutilities.Simulation, err error) *SDKService_EstimateFees_Call {
	_c.Call.Return(res, err)
	return _c
}

// LiquidityParams provides a mock function with given fields: _a0, _a1
func (_m *SDKService) LiquidityParams(_a0 context.Context, _a1 *sdkutilities.LiquidityParamsPayload) (*sdkutilities.LiquidityParams2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.LiquidityParams2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.LiquidityParamsPayload) *sdkutilities.LiquidityParams2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.LiquidityParams2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.LiquidityParamsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_LiquidityParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityParams'
type SDKService_LiquidityParams_Call struct {
	*mock.Call
}

// LiquidityParams is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.LiquidityParamsPayload
func (_e *SDKService_Expecter) LiquidityParams(_a0 interface{}, _a1 interface{}) *SDKService_LiquidityParams_Call {
	return &SDKService_LiquidityParams_Call{Call: _e.mock.On("LiquidityParams", _a0, _a1)}
}

func (_c *SDKService_LiquidityParams_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.LiquidityParamsPayload)) *SDKService_LiquidityParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.LiquidityParamsPayload))
	})
	return _c
}

func (_c *SDKService_LiquidityParams_Call) Return(res *sdkutilities.LiquidityParams2, err error) *SDKService_LiquidityParams_Call {
	_c.Call.Return(res, err)
	return _c
}

// LiquidityPools provides a mock function with given fields: _a0, _a1
func (_m *SDKService) LiquidityPools(_a0 context.Context, _a1 *sdkutilities.LiquidityPoolsPayload) (*sdkutilities.LiquidityPools2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.LiquidityPools2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.LiquidityPoolsPayload) *sdkutilities.LiquidityPools2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.LiquidityPools2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.LiquidityPoolsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_LiquidityPools_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LiquidityPools'
type SDKService_LiquidityPools_Call struct {
	*mock.Call
}

// LiquidityPools is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.LiquidityPoolsPayload
func (_e *SDKService_Expecter) LiquidityPools(_a0 interface{}, _a1 interface{}) *SDKService_LiquidityPools_Call {
	return &SDKService_LiquidityPools_Call{Call: _e.mock.On("LiquidityPools", _a0, _a1)}
}

func (_c *SDKService_LiquidityPools_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.LiquidityPoolsPayload)) *SDKService_LiquidityPools_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.LiquidityPoolsPayload))
	})
	return _c
}

func (_c *SDKService_LiquidityPools_Call) Return(res *sdkutilities.LiquidityPools2, err error) *SDKService_LiquidityPools_Call {
	_c.Call.Return(res, err)
	return _c
}

// MintAnnualProvision provides a mock function with given fields: _a0, _a1
func (_m *SDKService) MintAnnualProvision(_a0 context.Context, _a1 *sdkutilities.MintAnnualProvisionPayload) (*sdkutilities.MintAnnualProvision2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.MintAnnualProvision2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.MintAnnualProvisionPayload) *sdkutilities.MintAnnualProvision2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.MintAnnualProvision2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.MintAnnualProvisionPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_MintAnnualProvision_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintAnnualProvision'
type SDKService_MintAnnualProvision_Call struct {
	*mock.Call
}

// MintAnnualProvision is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.MintAnnualProvisionPayload
func (_e *SDKService_Expecter) MintAnnualProvision(_a0 interface{}, _a1 interface{}) *SDKService_MintAnnualProvision_Call {
	return &SDKService_MintAnnualProvision_Call{Call: _e.mock.On("MintAnnualProvision", _a0, _a1)}
}

func (_c *SDKService_MintAnnualProvision_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.MintAnnualProvisionPayload)) *SDKService_MintAnnualProvision_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.MintAnnualProvisionPayload))
	})
	return _c
}

func (_c *SDKService_MintAnnualProvision_Call) Return(res *sdkutilities.MintAnnualProvision2, err error) *SDKService_MintAnnualProvision_Call {
	_c.Call.Return(res, err)
	return _c
}

// MintEpochProvisions provides a mock function with given fields: _a0, _a1
func (_m *SDKService) MintEpochProvisions(_a0 context.Context, _a1 *sdkutilities.MintEpochProvisionsPayload) (*sdkutilities.MintEpochProvisions2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.MintEpochProvisions2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.MintEpochProvisionsPayload) *sdkutilities.MintEpochProvisions2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.MintEpochProvisions2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.MintEpochProvisionsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_MintEpochProvisions_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintEpochProvisions'
type SDKService_MintEpochProvisions_Call struct {
	*mock.Call
}

// MintEpochProvisions is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.MintEpochProvisionsPayload
func (_e *SDKService_Expecter) MintEpochProvisions(_a0 interface{}, _a1 interface{}) *SDKService_MintEpochProvisions_Call {
	return &SDKService_MintEpochProvisions_Call{Call: _e.mock.On("MintEpochProvisions", _a0, _a1)}
}

func (_c *SDKService_MintEpochProvisions_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.MintEpochProvisionsPayload)) *SDKService_MintEpochProvisions_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.MintEpochProvisionsPayload))
	})
	return _c
}

func (_c *SDKService_MintEpochProvisions_Call) Return(res *sdkutilities.MintEpochProvisions2, err error) *SDKService_MintEpochProvisions_Call {
	_c.Call.Return(res, err)
	return _c
}

// MintInflation provides a mock function with given fields: _a0, _a1
func (_m *SDKService) MintInflation(_a0 context.Context, _a1 *sdkutilities.MintInflationPayload) (*sdkutilities.MintInflation2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.MintInflation2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.MintInflationPayload) *sdkutilities.MintInflation2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.MintInflation2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.MintInflationPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_MintInflation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintInflation'
type SDKService_MintInflation_Call struct {
	*mock.Call
}

// MintInflation is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.MintInflationPayload
func (_e *SDKService_Expecter) MintInflation(_a0 interface{}, _a1 interface{}) *SDKService_MintInflation_Call {
	return &SDKService_MintInflation_Call{Call: _e.mock.On("MintInflation", _a0, _a1)}
}

func (_c *SDKService_MintInflation_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.MintInflationPayload)) *SDKService_MintInflation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.MintInflationPayload))
	})
	return _c
}

func (_c *SDKService_MintInflation_Call) Return(res *sdkutilities.MintInflation2, err error) *SDKService_MintInflation_Call {
	_c.Call.Return(res, err)
	return _c
}

// MintParams provides a mock function with given fields: _a0, _a1
func (_m *SDKService) MintParams(_a0 context.Context, _a1 *sdkutilities.MintParamsPayload) (*sdkutilities.MintParams2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.MintParams2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.MintParamsPayload) *sdkutilities.MintParams2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.MintParams2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.MintParamsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_MintParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MintParams'
type SDKService_MintParams_Call struct {
	*mock.Call
}

// MintParams is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.MintParamsPayload
func (_e *SDKService_Expecter) MintParams(_a0 interface{}, _a1 interface{}) *SDKService_MintParams_Call {
	return &SDKService_MintParams_Call{Call: _e.mock.On("MintParams", _a0, _a1)}
}

func (_c *SDKService_MintParams_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.MintParamsPayload)) *SDKService_MintParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.MintParamsPayload))
	})
	return _c
}

func (_c *SDKService_MintParams_Call) Return(res *sdkutilities.MintParams2, err error) *SDKService_MintParams_Call {
	_c.Call.Return(res, err)
	return _c
}

// QueryTx provides a mock function with given fields: _a0, _a1
func (_m *SDKService) QueryTx(_a0 context.Context, _a1 *sdkutilities.QueryTxPayload) ([]byte, error) {
	ret := _m.Called(_a0, _a1)

	var r0 []byte
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.QueryTxPayload) []byte); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.QueryTxPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_QueryTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'QueryTx'
type SDKService_QueryTx_Call struct {
	*mock.Call
}

// QueryTx is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.QueryTxPayload
func (_e *SDKService_Expecter) QueryTx(_a0 interface{}, _a1 interface{}) *SDKService_QueryTx_Call {
	return &SDKService_QueryTx_Call{Call: _e.mock.On("QueryTx", _a0, _a1)}
}

func (_c *SDKService_QueryTx_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.QueryTxPayload)) *SDKService_QueryTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.QueryTxPayload))
	})
	return _c
}

func (_c *SDKService_QueryTx_Call) Return(res []byte, err error) *SDKService_QueryTx_Call {
	_c.Call.Return(res, err)
	return _c
}

// StakingParams provides a mock function with given fields: _a0, _a1
func (_m *SDKService) StakingParams(_a0 context.Context, _a1 *sdkutilities.StakingParamsPayload) (*sdkutilities.StakingParams2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.StakingParams2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.StakingParamsPayload) *sdkutilities.StakingParams2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.StakingParams2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.StakingParamsPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_StakingParams_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StakingParams'
type SDKService_StakingParams_Call struct {
	*mock.Call
}

// StakingParams is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.StakingParamsPayload
func (_e *SDKService_Expecter) StakingParams(_a0 interface{}, _a1 interface{}) *SDKService_StakingParams_Call {
	return &SDKService_StakingParams_Call{Call: _e.mock.On("StakingParams", _a0, _a1)}
}

func (_c *SDKService_StakingParams_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.StakingParamsPayload)) *SDKService_StakingParams_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.StakingParamsPayload))
	})
	return _c
}

func (_c *SDKService_StakingParams_Call) Return(res *sdkutilities.StakingParams2, err error) *SDKService_StakingParams_Call {
	_c.Call.Return(res, err)
	return _c
}

// StakingPool provides a mock function with given fields: _a0, _a1
func (_m *SDKService) StakingPool(_a0 context.Context, _a1 *sdkutilities.StakingPoolPayload) (*sdkutilities.StakingPool2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.StakingPool2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.StakingPoolPayload) *sdkutilities.StakingPool2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.StakingPool2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.StakingPoolPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_StakingPool_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StakingPool'
type SDKService_StakingPool_Call struct {
	*mock.Call
}

// StakingPool is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.StakingPoolPayload
func (_e *SDKService_Expecter) StakingPool(_a0 interface{}, _a1 interface{}) *SDKService_StakingPool_Call {
	return &SDKService_StakingPool_Call{Call: _e.mock.On("StakingPool", _a0, _a1)}
}

func (_c *SDKService_StakingPool_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.StakingPoolPayload)) *SDKService_StakingPool_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.StakingPoolPayload))
	})
	return _c
}

func (_c *SDKService_StakingPool_Call) Return(res *sdkutilities.StakingPool2, err error) *SDKService_StakingPool_Call {
	_c.Call.Return(res, err)
	return _c
}

// Supply provides a mock function with given fields: _a0, _a1
func (_m *SDKService) Supply(_a0 context.Context, _a1 *sdkutilities.SupplyPayload) (*sdkutilities.Supply2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.Supply2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.SupplyPayload) *sdkutilities.Supply2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.Supply2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.SupplyPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_Supply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Supply'
type SDKService_Supply_Call struct {
	*mock.Call
}

// Supply is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.SupplyPayload
func (_e *SDKService_Expecter) Supply(_a0 interface{}, _a1 interface{}) *SDKService_Supply_Call {
	return &SDKService_Supply_Call{Call: _e.mock.On("Supply", _a0, _a1)}
}

func (_c *SDKService_Supply_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.SupplyPayload)) *SDKService_Supply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.SupplyPayload))
	})
	return _c
}

func (_c *SDKService_Supply_Call) Return(res *sdkutilities.Supply2, err error) *SDKService_Supply_Call {
	_c.Call.Return(res, err)
	return _c
}

// SupplyDenom provides a mock function with given fields: _a0, _a1
func (_m *SDKService) SupplyDenom(_a0 context.Context, _a1 *sdkutilities.SupplyDenomPayload) (*sdkutilities.Supply2, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.Supply2
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.SupplyDenomPayload) *sdkutilities.Supply2); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.Supply2)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.SupplyDenomPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_SupplyDenom_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SupplyDenom'
type SDKService_SupplyDenom_Call struct {
	*mock.Call
}

// SupplyDenom is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.SupplyDenomPayload
func (_e *SDKService_Expecter) SupplyDenom(_a0 interface{}, _a1 interface{}) *SDKService_SupplyDenom_Call {
	return &SDKService_SupplyDenom_Call{Call: _e.mock.On("SupplyDenom", _a0, _a1)}
}

func (_c *SDKService_SupplyDenom_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.SupplyDenomPayload)) *SDKService_SupplyDenom_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.SupplyDenomPayload))
	})
	return _c
}

func (_c *SDKService_SupplyDenom_Call) Return(res *sdkutilities.Supply2, err error) *SDKService_SupplyDenom_Call {
	_c.Call.Return(res, err)
	return _c
}

// TxMetadata provides a mock function with given fields: _a0, _a1
func (_m *SDKService) TxMetadata(_a0 context.Context, _a1 *sdkutilities.TxMetadataPayload) (*sdkutilities.TxMessagesMetadata, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *sdkutilities.TxMessagesMetadata
	if rf, ok := ret.Get(0).(func(context.Context, *sdkutilities.TxMetadataPayload) *sdkutilities.TxMessagesMetadata); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sdkutilities.TxMessagesMetadata)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *sdkutilities.TxMetadataPayload) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SDKService_TxMetadata_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TxMetadata'
type SDKService_TxMetadata_Call struct {
	*mock.Call
}

// TxMetadata is a helper method to define mock.On call
//  - _a0 context.Context
//  - _a1 *sdkutilities.TxMetadataPayload
func (_e *SDKService_Expecter) TxMetadata(_a0 interface{}, _a1 interface{}) *SDKService_TxMetadata_Call {
	return &SDKService_TxMetadata_Call{Call: _e.mock.On("TxMetadata", _a0, _a1)}
}

func (_c *SDKService_TxMetadata_Call) Run(run func(_a0 context.Context, _a1 *sdkutilities.TxMetadataPayload)) *SDKService_TxMetadata_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sdkutilities.TxMetadataPayload))
	})
	return _c
}

func (_c *SDKService_TxMetadata_Call) Return(res *sdkutilities.TxMessagesMetadata, err error) *SDKService_TxMetadata_Call {
	_c.Call.Return(res, err)
	return _c
}

// NewSDKService creates a new instance of SDKService. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewSDKService(t testing.TB) *SDKService {
	mock := &SDKService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
