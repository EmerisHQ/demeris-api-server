// Code generated by mockery v2.12.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// HandlerFunc is an autogenerated mock type for the HandlerFunc type
type HandlerFunc struct {
	mock.Mock
}

type HandlerFunc_Expecter struct {
	mock *mock.Mock
}

func (_m *HandlerFunc) EXPECT() *HandlerFunc_Expecter {
	return &HandlerFunc_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, key
func (_m *HandlerFunc) Execute(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandlerFunc_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type HandlerFunc_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - ctx context.Context
//  - key string
func (_e *HandlerFunc_Expecter) Execute(ctx interface{}, key interface{}) *HandlerFunc_Execute_Call {
	return &HandlerFunc_Execute_Call{Call: _e.mock.On("Execute", ctx, key)}
}

func (_c *HandlerFunc_Execute_Call) Run(run func(ctx context.Context, key string)) *HandlerFunc_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *HandlerFunc_Execute_Call) Return(_a0 string, _a1 error) *HandlerFunc_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// NewHandlerFunc creates a new instance of HandlerFunc. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandlerFunc(t testing.TB) *HandlerFunc {
	mock := &HandlerFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
