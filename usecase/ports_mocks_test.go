// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	usecase "github.com/emerishq/demeris-api-server/usecase"
	sdk_utilities "github.com/emerishq/sdk-service-meta/gen/sdk_utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockSDKServiceClients is a mock of SDKServiceClients interface.
type MockSDKServiceClients struct {
	ctrl     *gomock.Controller
	recorder *MockSDKServiceClientsMockRecorder
}

// MockSDKServiceClientsMockRecorder is the mock recorder for MockSDKServiceClients.
type MockSDKServiceClientsMockRecorder struct {
	mock *MockSDKServiceClients
}

// NewMockSDKServiceClients creates a new mock instance.
func NewMockSDKServiceClients(ctrl *gomock.Controller) *MockSDKServiceClients {
	mock := &MockSDKServiceClients{ctrl: ctrl}
	mock.recorder = &MockSDKServiceClientsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKServiceClients) EXPECT() *MockSDKServiceClientsMockRecorder {
	return m.recorder
}

// GetSDKServiceClient mocks base method.
func (m *MockSDKServiceClients) GetSDKServiceClient(version string) (usecase.SDKServiceClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSDKServiceClient", version)
	ret0, _ := ret[0].(usecase.SDKServiceClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSDKServiceClient indicates an expected call of GetSDKServiceClient.
func (mr *MockSDKServiceClientsMockRecorder) GetSDKServiceClient(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSDKServiceClient", reflect.TypeOf((*MockSDKServiceClients)(nil).GetSDKServiceClient), version)
}

// MockSDKServiceClient is a mock of SDKServiceClient interface.
type MockSDKServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockSDKServiceClientMockRecorder
}

// MockSDKServiceClientMockRecorder is the mock recorder for MockSDKServiceClient.
type MockSDKServiceClientMockRecorder struct {
	mock *MockSDKServiceClient
}

// NewMockSDKServiceClient creates a new mock instance.
func NewMockSDKServiceClient(ctrl *gomock.Controller) *MockSDKServiceClient {
	mock := &MockSDKServiceClient{ctrl: ctrl}
	mock.recorder = &MockSDKServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKServiceClient) EXPECT() *MockSDKServiceClientMockRecorder {
	return m.recorder
}

// AccountNumbers mocks base method.
func (m *MockSDKServiceClient) AccountNumbers(arg0 context.Context, arg1 *sdk_utilities.AccountNumbersPayload) (*sdk_utilities.AccountNumbers2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AccountNumbers", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.AccountNumbers2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AccountNumbers indicates an expected call of AccountNumbers.
func (mr *MockSDKServiceClientMockRecorder) AccountNumbers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AccountNumbers", reflect.TypeOf((*MockSDKServiceClient)(nil).AccountNumbers), arg0, arg1)
}

// BudgetParams mocks base method.
func (m *MockSDKServiceClient) BudgetParams(arg0 context.Context, arg1 *sdk_utilities.BudgetParamsPayload) (*sdk_utilities.BudgetParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BudgetParams", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.BudgetParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BudgetParams indicates an expected call of BudgetParams.
func (mr *MockSDKServiceClientMockRecorder) BudgetParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BudgetParams", reflect.TypeOf((*MockSDKServiceClient)(nil).BudgetParams), arg0, arg1)
}

// DistributionParams mocks base method.
func (m *MockSDKServiceClient) DistributionParams(arg0 context.Context, arg1 *sdk_utilities.DistributionParamsPayload) (*sdk_utilities.DistributionParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributionParams", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.DistributionParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributionParams indicates an expected call of DistributionParams.
func (mr *MockSDKServiceClientMockRecorder) DistributionParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributionParams", reflect.TypeOf((*MockSDKServiceClient)(nil).DistributionParams), arg0, arg1)
}

// MintInflation mocks base method.
func (m *MockSDKServiceClient) MintInflation(arg0 context.Context, arg1 *sdk_utilities.MintInflationPayload) (*sdk_utilities.MintInflation2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintInflation", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.MintInflation2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintInflation indicates an expected call of MintInflation.
func (mr *MockSDKServiceClientMockRecorder) MintInflation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintInflation", reflect.TypeOf((*MockSDKServiceClient)(nil).MintInflation), arg0, arg1)
}

// MintParams mocks base method.
func (m *MockSDKServiceClient) MintParams(arg0 context.Context, arg1 *sdk_utilities.MintParamsPayload) (*sdk_utilities.MintParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintParams", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.MintParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintParams indicates an expected call of MintParams.
func (mr *MockSDKServiceClientMockRecorder) MintParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintParams", reflect.TypeOf((*MockSDKServiceClient)(nil).MintParams), arg0, arg1)
}

// StakingParams mocks base method.
func (m *MockSDKServiceClient) StakingParams(arg0 context.Context, arg1 *sdk_utilities.StakingParamsPayload) (*sdk_utilities.StakingParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingParams", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.StakingParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingParams indicates an expected call of StakingParams.
func (mr *MockSDKServiceClientMockRecorder) StakingParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingParams", reflect.TypeOf((*MockSDKServiceClient)(nil).StakingParams), arg0, arg1)
}

// StakingPool mocks base method.
func (m *MockSDKServiceClient) StakingPool(arg0 context.Context, arg1 *sdk_utilities.StakingPoolPayload) (*sdk_utilities.StakingPool2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingPool", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.StakingPool2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingPool indicates an expected call of StakingPool.
func (mr *MockSDKServiceClientMockRecorder) StakingPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingPool", reflect.TypeOf((*MockSDKServiceClient)(nil).StakingPool), arg0, arg1)
}

// SupplyDenom mocks base method.
func (m *MockSDKServiceClient) SupplyDenom(arg0 context.Context, arg1 *sdk_utilities.SupplyDenomPayload) (*sdk_utilities.Supply2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupplyDenom", arg0, arg1)
	ret0, _ := ret[0].(*sdk_utilities.Supply2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupplyDenom indicates an expected call of SupplyDenom.
func (mr *MockSDKServiceClientMockRecorder) SupplyDenom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplyDenom", reflect.TypeOf((*MockSDKServiceClient)(nil).SupplyDenom), arg0, arg1)
}
