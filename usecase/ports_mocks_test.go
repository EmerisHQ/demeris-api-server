// Code generated by MockGen. DO NOT EDIT.
// Source: ports.go

// Package usecase_test is a generated GoMock package.
package usecase_test

import (
	context "context"
	reflect "reflect"

	sdkutilities "github.com/emerishq/sdk-service-meta/gen/sdk_utilities"
	gomock "github.com/golang/mock/gomock"
)

// MockSDKClient is a mock of SDKClient interface.
type MockSDKClient struct {
	ctrl     *gomock.Controller
	recorder *MockSDKClientMockRecorder
}

// MockSDKClientMockRecorder is the mock recorder for MockSDKClient.
type MockSDKClientMockRecorder struct {
	mock *MockSDKClient
}

// NewMockSDKClient creates a new mock instance.
func NewMockSDKClient(ctrl *gomock.Controller) *MockSDKClient {
	mock := &MockSDKClient{ctrl: ctrl}
	mock.recorder = &MockSDKClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDKClient) EXPECT() *MockSDKClientMockRecorder {
	return m.recorder
}

// BudgetParams mocks base method.
func (m *MockSDKClient) BudgetParams(arg0 context.Context, arg1 *sdkutilities.BudgetParamsPayload) (*sdkutilities.BudgetParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BudgetParams", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.BudgetParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BudgetParams indicates an expected call of BudgetParams.
func (mr *MockSDKClientMockRecorder) BudgetParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BudgetParams", reflect.TypeOf((*MockSDKClient)(nil).BudgetParams), arg0, arg1)
}

// DistributionParams mocks base method.
func (m *MockSDKClient) DistributionParams(arg0 context.Context, arg1 *sdkutilities.DistributionParamsPayload) (*sdkutilities.DistributionParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DistributionParams", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.DistributionParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DistributionParams indicates an expected call of DistributionParams.
func (mr *MockSDKClientMockRecorder) DistributionParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DistributionParams", reflect.TypeOf((*MockSDKClient)(nil).DistributionParams), arg0, arg1)
}

// MintInflation mocks base method.
func (m *MockSDKClient) MintInflation(arg0 context.Context, arg1 *sdkutilities.MintInflationPayload) (*sdkutilities.MintInflation2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintInflation", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.MintInflation2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintInflation indicates an expected call of MintInflation.
func (mr *MockSDKClientMockRecorder) MintInflation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintInflation", reflect.TypeOf((*MockSDKClient)(nil).MintInflation), arg0, arg1)
}

// MintParams mocks base method.
func (m *MockSDKClient) MintParams(arg0 context.Context, arg1 *sdkutilities.MintParamsPayload) (*sdkutilities.MintParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MintParams", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.MintParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MintParams indicates an expected call of MintParams.
func (mr *MockSDKClientMockRecorder) MintParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MintParams", reflect.TypeOf((*MockSDKClient)(nil).MintParams), arg0, arg1)
}

// StakingParams mocks base method.
func (m *MockSDKClient) StakingParams(arg0 context.Context, arg1 *sdkutilities.StakingParamsPayload) (*sdkutilities.StakingParams2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingParams", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.StakingParams2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingParams indicates an expected call of StakingParams.
func (mr *MockSDKClientMockRecorder) StakingParams(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingParams", reflect.TypeOf((*MockSDKClient)(nil).StakingParams), arg0, arg1)
}

// StakingPool mocks base method.
func (m *MockSDKClient) StakingPool(arg0 context.Context, arg1 *sdkutilities.StakingPoolPayload) (*sdkutilities.StakingPool2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakingPool", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.StakingPool2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StakingPool indicates an expected call of StakingPool.
func (mr *MockSDKClientMockRecorder) StakingPool(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakingPool", reflect.TypeOf((*MockSDKClient)(nil).StakingPool), arg0, arg1)
}

// SupplyDenom mocks base method.
func (m *MockSDKClient) SupplyDenom(arg0 context.Context, arg1 *sdkutilities.SupplyDenomPayload) (*sdkutilities.Supply2, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupplyDenom", arg0, arg1)
	ret0, _ := ret[0].(*sdkutilities.Supply2)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupplyDenom indicates an expected call of SupplyDenom.
func (mr *MockSDKClientMockRecorder) SupplyDenom(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupplyDenom", reflect.TypeOf((*MockSDKClient)(nil).SupplyDenom), arg0, arg1)
}
